package uk.gov.hmcts.reform.demo.utils;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;


import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * Utility class for interacting with the OpenAI ChatGPT API.
 */
@Component
public class ChatGptApi {

    private final String apiKey;
    private final ObjectMapper objectMapper;

    /**
     * Constructor to inject the OpenAI API key from application properties.
     *
     * @param apiKey The OpenAI API key.
     */
    public ChatGptApi(@Value("${openai.api.key}") String apiKey) {
        this.apiKey = apiKey;
        this.objectMapper = new ObjectMapper();
    }

    /**
     * Sends a prompt to the ChatGPT API and retrieves the response.
     *
     * @param prompt The user's message to send to the ChatGPT API.
     * @return The response message generated by the ChatGPT API.
     * @throws RuntimeException If there is an error during communication with the API.
     */
    public String chatGpt(String prompt) {
        String url = "https://api.openai.com/v1/chat/completions";
        String model = "gpt-4";

        try {
            URL obj = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) obj.openConnection();

            // Configure connection
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Authorization", "Bearer " + apiKey);
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);

            // Construct JSON request body
            String jsonInputString = "{"
                + "\"model\": \"" + model + "\", "
                + "\"messages\": [{\"role\": \"user\", \"content\": \"" + escapeJson(prompt) + "\"}], "
                + "\"max_tokens\": 150"
                + "}";

            // Send request
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = jsonInputString.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            // Read response
            int status = connection.getResponseCode();
            InputStream is = (status >= 200 && status < 300)
                ? connection.getInputStream() : connection.getErrorStream();

            StringBuilder response;
            try (BufferedReader br = new BufferedReader(new InputStreamReader(is, "utf-8"))) {
                response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
            }

            if (status >= 200 && status < 300) {
                return extractMessageFromJsonResponse(response.toString());
            } else {
                String errorMsg = extractErrorMessage(response.toString());
                throw new RuntimeException("ChatGPT API request failed with status " + status + ": " + errorMsg);
            }

        } catch (IOException e) {
            throw new RuntimeException("Error communicating with ChatGPT API: " + e.getMessage(), e);
        }
    }

    /**
     * Generates a one-sentence summary of the user's message using the ChatGPT API.
     *
     * @param message The user's message to summarize.
     * @return A one-sentence summary of the message.
     * @throws RuntimeException If there is an error during communication with the API.
     */
    public String summarize(String message) {
        String url = "https://api.openai.com/v1/chat/completions";
        String model = "gpt-4";

        try {
            URL obj = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) obj.openConnection();

            // Configure connection
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Authorization", "Bearer " + apiKey);
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);

            // Define the prompt for summarization
            String prompt = "Please provide a concise one-sentence summary "
                + "of the following message:\n\n\"" + message + "\"";

            // Construct JSON request body
            String jsonInputString = "{"
                + "\"model\": \"" + model + "\", "
                + "\"messages\": ["
                + "{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, "
                + "{\"role\": \"user\", \"content\": \"" + escapeJson(prompt) + "\"}"
                + "], "
                + "\"max_tokens\": 50, "
                + "\"temperature\": 0.5"
                + "}";

            // Send request
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = jsonInputString.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            // Read response
            int status = connection.getResponseCode();
            InputStream is = (status >= 200 && status < 300)
                ? connection.getInputStream() : connection.getErrorStream();

            StringBuilder response;
            try (BufferedReader br = new BufferedReader(new InputStreamReader(is, "utf-8"))) {
                response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
            }

            if (status >= 200 && status < 300) {
                return extractMessageFromJsonResponse(response.toString());
            } else {
                String errorMsg = extractErrorMessage(response.toString());
                throw new RuntimeException("ChatGPT API request for summary "
                                               + "failed with status " + status + ": " + errorMsg);
            }

        } catch (IOException e) {
            throw new RuntimeException("Error communicating with ChatGPT API for summary: " + e.getMessage(), e);
        }
    }

    /**
     * Extracts the "content" field from a successful JSON response string.
     *
     * @param response The JSON response string from the ChatGPT API.
     * @return The extracted "content" field as a string.
     * @throws IOException If there is an error during JSON parsing.
     */
    private String extractMessageFromJsonResponse(String response) throws IOException {
        JsonNode root = objectMapper.readTree(response);
        JsonNode choices = root.path("choices");
        if (choices.isArray() && choices.size() > 0) {
            JsonNode messageNode = choices.get(0).path("message").path("content");
            if (!messageNode.isMissingNode()) {
                return messageNode.asText().trim();
            }
        }
        throw new RuntimeException("Invalid response structure from ChatGPT API.");
    }

    /**
     * Extracts the error message from a JSON error response string.
     *
     * @param response The JSON error response string from the ChatGPT API.
     * @return The extracted error message as a string.
     * @throws IOException If there is an error during JSON parsing.
     */
    private String extractErrorMessage(String response) throws IOException {
        JsonNode root = objectMapper.readTree(response);
        JsonNode errorNode = root.path("error").path("message");
        if (!errorNode.isMissingNode()) {
            return errorNode.asText().trim();
        }
        return "Unknown error occurred.";
    }

    /**
     * Escapes special characters in a JSON string value.
     *
     * @param text The text to escape.
     * @return The escaped text.
     */
    private String escapeJson(String text) {
        return text.replace("\\", "\\\\")
            .replace("\"", "\\\"")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\t", "\\t");
    }
}
