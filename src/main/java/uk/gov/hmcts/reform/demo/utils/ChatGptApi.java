package uk.gov.hmcts.reform.demo.utils;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;

/**
 * Utility class for interacting with the OpenAI ChatGPT API.
 */
@Component
public class ChatGptApi {

    private final String apiKey;
    private final ObjectMapper objectMapper;

    /**
     * Constructor to inject the OpenAI API key from application properties.
     *
     * @param apiKey The OpenAI API key.
     */
    public ChatGptApi(@Value("${openai.api.key}") String apiKey) {
        this.apiKey = apiKey;
        this.objectMapper = new ObjectMapper();
    }

    /**
     * Sends a prompt to the ChatGPT API and retrieves the response (single-message version).
     *
     * @param prompt The user's message to send to the ChatGPT API.
     * @return The response message generated by the ChatGPT API.
     * @throws RuntimeException If there is an error during communication with the API.
     */
    public String chatGpt(String prompt) {
        String url = "https://api.openai.com/v1/chat/completions";
        String model = "gpt-4";

        try {
            HttpURLConnection connection = openApiConnection(url);

            // Construct JSON request body for single prompt
            String jsonInputString = "{"
                + "\"model\": \"" + model + "\", "
                + "\"messages\": [{\"role\": \"user\", \"content\": \"" + escapeJson(prompt) + "\"}], "
                + "\"max_tokens\": 150"
                + "}";

            // Send request
            sendJsonRequest(connection, jsonInputString);

            // Read response
            int status = connection.getResponseCode();
            StringBuilder response = readResponse(connection, status);

            if (status >= 200 && status < 300) {
                return extractMessageFromJsonResponse(response.toString());
            } else {
                String errorMsg = extractErrorMessage(response.toString());
                throw new RuntimeException("ChatGPT API request failed with status " + status + ": " + errorMsg);
            }

        } catch (IOException e) {
            throw new RuntimeException("Error communicating with ChatGPT API: " + e.getMessage(), e);
        }
    }

    /**
     * Sends a full conversation history (multi-message) to ChatGPT.
     *
     * @param conversation A list of messages, each a Map with "role" and "content".
     *                     For example:
     *                     [
     *                       {"role": "system", "content": "You are a helpful assistant."},
     *                       {"role": "user", "content": "Hello!"},
     *                       {"role": "assistant", "content": "Hi there!"},
     *                       ...
     *                     ]
     * @return The assistant's reply that includes context from all prior messages.
     */
    public String chatGptWithHistory(List<Map<String, String>> conversation) {
        String url = "https://api.openai.com/v1/chat/completions";
        String model = "gpt-4";

        try {
            HttpURLConnection connection = openApiConnection(url);

            // Build the messages array
            // We'll manually build the JSON array for "messages"
            StringBuilder messagesJson = new StringBuilder("[");
            for (int i = 0; i < conversation.size(); i++) {
                Map<String, String> msg = conversation.get(i);
                String role = escapeJson(msg.get("role"));      // e.g. "user", "assistant", or "system"
                String content = escapeJson(msg.get("content"));
                messagesJson.append("{")
                    .append("\"role\": \"").append(role).append("\", ")
                    .append("\"content\": \"").append(content).append("\"")
                    .append("}");
                if (i < conversation.size() - 1) {
                    messagesJson.append(",");
                }
            }
            messagesJson.append("]");

            // Construct the JSON request body
            String jsonInputString = "{"
                + "\"model\": \"" + model + "\", "
                + "\"messages\": " + messagesJson.toString() + ", "
                + "\"max_tokens\": 150"
                + "}";

            // Send the request
            sendJsonRequest(connection, jsonInputString);

            // Read the response
            int status = connection.getResponseCode();
            StringBuilder response = readResponse(connection, status);

            if (status >= 200 && status < 300) {
                return extractMessageFromJsonResponse(response.toString());
            } else {
                String errorMsg = extractErrorMessage(response.toString());
                throw new RuntimeException("ChatGPT API request failed with status " + status + ": " + errorMsg);
            }

        } catch (IOException e) {
            throw new RuntimeException("Error communicating with ChatGPT API (multi-message): " + e.getMessage(), e);
        }
    }

    /**
     * Generates a one-sentence summary of the user's message using the ChatGPT API.
     *
     * @param message The user's message to summarize.
     * @return A one-sentence summary of the message.
     */
    public String summarize(String message) {
        String url = "https://api.openai.com/v1/chat/completions";
        String model = "gpt-4";

        try {
            HttpURLConnection connection = openApiConnection(url);

            // Define the prompt for summarization
            String prompt = "Please provide a concise one-sentence summary of the following message:\n\n\""
                + message + "\"";

            // Construct JSON request body
            String jsonInputString = "{"
                + "\"model\": \"" + model + "\", "
                + "\"messages\": ["
                + "{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, "
                + "{\"role\": \"user\", \"content\": \"" + escapeJson(prompt) + "\"}"
                + "], "
                + "\"max_tokens\": 50, "
                + "\"temperature\": 0.5"
                + "}";

            // Send request
            sendJsonRequest(connection, jsonInputString);

            // Read response
            int status = connection.getResponseCode();
            StringBuilder response = readResponse(connection, status);

            if (status >= 200 && status < 300) {
                return extractMessageFromJsonResponse(response.toString());
            } else {
                String errorMsg = extractErrorMessage(response.toString());
                throw new RuntimeException("ChatGPT API request for summary "
                                               + "failed with status " + status + ": " + errorMsg);
            }

        } catch (IOException e) {
            throw new RuntimeException("Error communicating with ChatGPT API for summary: " + e.getMessage(), e);
        }
    }

    // ------------------ Private Helper Methods ------------------

    /**
     * Opens an HttpURLConnection to the given URL, sets common headers.
     */
    private HttpURLConnection openApiConnection(String url) throws IOException {
        URL obj = new URL(url);
        HttpURLConnection connection = (HttpURLConnection) obj.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Authorization", "Bearer " + apiKey);
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);
        return connection;
    }

    /**
     * Sends a JSON request body over the given HttpURLConnection.
     */
    private void sendJsonRequest(HttpURLConnection connection, String jsonInputString) throws IOException {
        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = jsonInputString.getBytes("utf-8");
            os.write(input, 0, input.length);
        }
    }

    /**
     * Reads the response from the given connection, using input or error stream based on status.
     */
    private StringBuilder readResponse(HttpURLConnection connection, int status) throws IOException {
        InputStream is = (status >= 200 && status < 300)
            ? connection.getInputStream()
            : connection.getErrorStream();

        StringBuilder response;
        try (BufferedReader br = new BufferedReader(new InputStreamReader(is, "utf-8"))) {
            response = new StringBuilder();
            String responseLine;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
        }
        return response;
    }

    /**
     * Extracts the "content" field from a successful JSON response string.
     */
    private String extractMessageFromJsonResponse(String response) throws IOException {
        JsonNode root = objectMapper.readTree(response);
        JsonNode choices = root.path("choices");
        if (choices.isArray() && choices.size() > 0) {
            JsonNode messageNode = choices.get(0).path("message").path("content");
            if (!messageNode.isMissingNode()) {
                return messageNode.asText().trim();
            }
        }
        throw new RuntimeException("Invalid response structure from ChatGPT API.");
    }

    /**
     * Extracts the error message from a JSON error response string.
     */
    private String extractErrorMessage(String response) throws IOException {
        JsonNode root = objectMapper.readTree(response);
        JsonNode errorNode = root.path("error").path("message");
        if (!errorNode.isMissingNode()) {
            return errorNode.asText().trim();
        }
        return "Unknown error occurred.";
    }

    /**
     * Escapes special characters in a JSON string value.
     */
    private String escapeJson(String text) {
        return text.replace("\\", "\\\\")
            .replace("\"", "\\\"")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\t", "\\t");
    }
}
